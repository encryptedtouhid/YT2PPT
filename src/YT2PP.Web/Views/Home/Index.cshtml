@using YT2PP.Models
@model DataInputViewModel
@{
    ViewData["Title"] = "Home Page";
}


﻿<div class="container">
    <div class="row logomargintop">
        <div class="col-md-2">
        </div>
        <div class="col-md-8 text-center">
            <img src="img/banner.png" width="350" height="120" />
        </div>
        <div class="col-md-2">
        </div>
    </div>

    <div class="row justify-content-center mt-5">
        <div class="col-md-10 text-center">
            <form id="youtubeForm" name="youtubeForm">
                @Html.AntiForgeryToken()
                <div class="form-group">
                    <h1 asp-for="DataInput" class="control-label">Convert Youtube Video to PowerPoint Free </h1>
                    @Html.TextBoxFor(model => model.DataInput, new { @class = "form-control form-control-lg mt-3", placeholder = "Paste your YouTube link here", style = "font-size: 1.6rem;" })
                    <span asp-validation-for="DataInput" class="text-danger"></span>

                </div>
                <div class="form-group text-center" style="margin:1em;">
                    <button type="submit" class="btn btn-primary btn-lg">Convert</button>
                </div>
            </form>
        </div>
    </div>
</div>
<script src="~/lib/jquery/dist/jquery.min.js" asp-append-version="true"></script>
@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
<script>
    $(document).ready(function () {
        $("#youtubeForm").submit(function (event) {
            event.preventDefault(); // Prevent the default form submission
            $.ajax({
                type: "POST",
                url: "/Home/Extract",
                data: $(this).serialize(),
                success: function (response) {
                    console.log('Success:', response);
                    if (response.isSuccess) {
                        // If the response is a file download, construct the download URL
                        var contentType = 'application/vnd.openxmlformats-officedocument.presentationml.presentation'; // for .pptx files
                        // Create a blob object from the response
                        var blobUrl = base64ToBlob(response.fileBase64String, contentType);
                        // Create a temporary download link
                        var tempLink = document.createElement('a');
                        tempLink.href = blobUrl;
                        tempLink.setAttribute('download', getYouTubeVideoId(response.vId) + '.pptx'); // Set the file name here
                        tempLink.setAttribute('style', 'display: none;');

                        // Append the link to body
                        document.body.appendChild(tempLink);

                        // Trigger the click event
                        tempLink.click();

                        // Clean up
                        document.body.removeChild(tempLink);
                        window.URL.revokeObjectURL(blobUrl);
                    }
                },
                error: function (xhr) {
                   
                }
                
            });
        });



        function base64ToBlob(base64, contentType) {
            var byteCharacters = atob(base64);
            var byteArrays = [];

            for (var offset = 0; offset < byteCharacters.length; offset += 512) {
                var slice = byteCharacters.slice(offset, offset + 512);

                var byteNumbers = new Array(slice.length);
                for (var i = 0; i < slice.length; i++) {
                    byteNumbers[i] = slice.charCodeAt(i);
                }

                var byteArray = new Uint8Array(byteNumbers);
                byteArrays.push(byteArray);
            }

            return new Blob(byteArrays, { type: contentType });
        }
    });
</script>